#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <string.h>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <functional>
#include <string>
#define maxn 100010
const double  INF = 1234123412;
#define ll unsigned long long
using namespace std;
int N, M, K, T, S;

struct data
{
    int from;
    int to;
    int cost;
    int next;
};
struct data e[500010];
int t;
int head[100010];
int val[100010];
int dist[100010];
int vis[100010];
void add(int from,int to,int cost)
{
    e[t].from=from;
    e[t].to=to;
    e[t].cost=cost;
    e[t].next=head[from];
    head[from]=t++;
}


void spfa(int s)
{
    for(int i=0;i<=N;i++)
        dist[i]=-123412341;
    dist[s]=0;
    memset(vis,0,sizeof(vis));

    queue<int> q;
    q.push(s);
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        vis[u]=false;
        for(int i=head[u];i!=-1;i=e[i].next)
        {
            int v=e[i].to;
            if(dist[v]<max(dist[u],e[i].cost))
            {
                dist[v]=max(dist[u],e[i].cost);
                if(!vis[v])
                {
                    vis[v]=true;
                    q.push(v);
                }
            }
        }
    }
}
int main()
{
    int a,b,c;
    while(scanf("%d%d",&N,&M)!=EOF)
    {
        t=0;
        memset(head,-1,sizeof(head));
        for(int i=1;i<=N;i++)
            scanf("%d",&val[i]);
        for(int i=1;i<=M;i++)
        {
            scanf("%d%d%d",&a,&b,&c);
            add(a,b,val[b]-val[a]);
            if(c==2)
                add(b,a,val[a]-val[b]);
        }
        spfa(1);
       // cout<<dist[N]<<endl;
        printf("%d\n",dist[N]);
    }
	return 0;
}
